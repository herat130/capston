version: 2.1
orbs:
  docker: circleci/docker@1.4.0
  aws-eks: circleci/aws-eks@1.1.0
  kubernetes: circleci/kubernetes@0.4.0
jobs:
  build-app:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build React App
          command: |
            cd my-app
            npm i
            npm run build
      - save_cache:
          paths: [my-app/node_modules]
          key: frontend-build
  lint-app:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Lint React App
          command: |
            cd my-app
            npm i
            npm run lint
      - save_cache:
          paths: [my-app/node_modules]
          key: frontend-build
  unit-test:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: unit Test
          command: |
            cd my-app
            npm i
            npm run test
      - save_cache:
          paths: [my-app/node_modules]
          key: frontend-build
  builddocker-image:
    machine: true
    working_directory: ~/app
    steps:
      - checkout
      - run:
          name: build and push docker image
          command: |
            docker login --username $DOCKERHUB_USER --password $DOCKERHUB_PWD
            cd my-app
            chmod +x run_docker.sh
            ./run_docker.sh "${CIRCLE_WORKFLOW_ID:0:7}"
  deploy-bluegreen:
    executor: aws-eks/python3    
    working_directory: ~/app
    steps:
      - checkout
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: demoCluster
      - run:
          name: build and push docker image
          command: |
            kubectl version
            kubectl get service
            cd kubernetes
            chmod +x bluegreen.sh blue

workflows:
  default:
    jobs:
      # - build-app
      # - lint-app
      # - unit-test
      # - builddocker-image:
      #     requires: [unit-test]
      - deploy-bluegreen
        # requires: [builddocker-image]
      # - create-cluster:
      #     requires:
      #       - unit-test
      # - deploy-containers:
      #     requires:
      #       - create-cluster
      # - smoke-test:
      #     requires:
      #       - deploy-containers
